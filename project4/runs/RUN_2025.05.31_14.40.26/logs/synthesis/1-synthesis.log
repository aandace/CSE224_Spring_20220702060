
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /openlane/pdks/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/project4/src/ALU.v
Parsing SystemVerilog input from `/openlane/designs/project4/src/ALU.v' to AST representation.
Storing AST representation for module `$abstract\ALU'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/project4/src/Top.v
Parsing SystemVerilog input from `/openlane/designs/project4/src/Top.v' to AST representation.
Storing AST representation for module `$abstract\Top'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/project4/src/RegisterFile.v
Parsing SystemVerilog input from `/openlane/designs/project4/src/RegisterFile.v' to AST representation.
Storing AST representation for module `$abstract\RegisterFile'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openlane/designs/project4/src/TopModule.v
Parsing SystemVerilog input from `/openlane/designs/project4/src/TopModule.v' to AST representation.
Storing AST representation for module `$abstract\TopModule'.
Successfully finished Verilog frontend.

6. Executing HIERARCHY pass (managing design hierarchy).

7. Executing AST frontend in derive mode using pre-parsed AST for module `\TopModule'.
Generating RTLIL representation for module `\TopModule'.

7.1. Analyzing design hierarchy..
Top module:  \TopModule

7.2. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.

7.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

7.4. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \RegisterFile
Used module:     \ALU

7.5. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \RegisterFile
Used module:     \ALU
Removing unused module `$abstract\TopModule'.
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\Top'.
Removing unused module `$abstract\ALU'.
Removed 4 unused modules.

8. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project4/runs/RUN_2025.05.31_14.40.26/tmp/synthesis/hierarchy.dot'.
Dumping module TopModule to page 1.
Renaming module TopModule to TopModule.

9. Executing TRIBUF pass.

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \RegisterFile
Used module:     \ALU

10.2. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \RegisterFile
Used module:     \ALU
Removed 0 unused modules.

11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/project4/src/RegisterFile.v:14$2 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/project4/src/ALU.v:9$11 in module ALU.
Removed a total of 0 dead cases.

13. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 3 assignments to connections.

14. Executing PROC_INIT pass (extract init attributes).

15. Executing PROC_ARST pass (detect async resets in processes).

16. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

17. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
     1/5: $1$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$8
     2/5: $1$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_DATA[31:0]$7
     3/5: $1$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_ADDR[4:0]$6
     4/5: $0\RD2[31:0]
     5/5: $0\RD1[31:0]
Creating decoders for process `\ALU.$proc$/openlane/designs/project4/src/ALU.v:9$11'.
     1/1: $0\outputC[31:0]

18. Executing PROC_DLATCH pass (convert process syncs to latches).

19. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\RegisterFile.\RD1' using process `\RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
  created $dff cell `$procdff$36' with positive edge clock.
Creating register for signal `\RegisterFile.\RD2' using process `\RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
  created $dff cell `$procdff$37' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_ADDR' using process `\RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_DATA' using process `\RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
  created $dff cell `$procdff$39' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN' using process `\RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\ALU.\outputC' using process `\ALU.$proc$/openlane/designs/project4/src/ALU.v:9$11'.
  created $dff cell `$procdff$41' with positive edge clock.

20. Executing PROC_MEMWR pass (convert process memory writes to cells).

21. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
Removing empty process `RegisterFile.$proc$/openlane/designs/project4/src/RegisterFile.v:14$2'.
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/project4/src/ALU.v:9$11'.
Removing empty process `ALU.$proc$/openlane/designs/project4/src/ALU.v:9$11'.
Cleaned up 2 empty switches.

22. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Checking module RegisterFile...
Checking module ALU...
Found and reported 0 problems.

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
Optimizing module RegisterFile.
Optimizing module ALU.
<suppressed ~1 debug messages>

24. Executing FLATTEN pass (flatten design).
Deleting now unused module RegisterFile.
Deleting now unused module ALU.
<suppressed ~2 debug messages>

25. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 3 unused cells and 17 unused wires.
<suppressed ~4 debug messages>

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $flatten\regfile_inst.$procmux$17:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5
      New ports: A=1'0, B=1'1, Y=$flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0]
      New connections: $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [31:1] = { $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] $flatten\regfile_inst.$0$memwr$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:16$1_EN[31:0]$5 [0] }
  Optimizing cells in module \TopModule.
Performed a total of 1 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing FSM pass (extract and optimize FSM).

28.1. Executing FSM_DETECT pass (finding FSMs in design).

28.2. Executing FSM_EXTRACT pass (extracting FSM from design).

28.3. Executing FSM_OPT pass (simple optimizations of FSMs).

28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

28.5. Executing FSM_OPT pass (simple optimizations of FSMs).

28.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

28.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

28.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\regfile_inst.$procdff$37 ($dff) from module TopModule (D = $flatten\regfile_inst.$memrd$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:19$10_DATA, Q = \regfile_inst.RD2).
Adding EN signal on $flatten\regfile_inst.$procdff$36 ($dff) from module TopModule (D = $flatten\regfile_inst.$memrd$\RegisterFile$/openlane/designs/project4/src/RegisterFile.v:18$9_DATA, Q = \regfile_inst.RD1).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

29.9. Rerunning OPT passes. (Maybe there is more to do..)

29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

29.13. Executing OPT_DFF pass (perform DFF optimizations).

29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

29.16. Finished OPT passes. (There is nothing left to do.)

30. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell TopModule.$flatten\alu_inst.$procmux$34_CMP0 ($eq).

31. Executing PEEPOPT pass (run peephole optimizers).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

33. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module TopModule:
  creating $macc model for $flatten\alu_inst.$add$/openlane/designs/project4/src/ALU.v:11$12 ($add).
  creating $macc model for $flatten\alu_inst.$sub$/openlane/designs/project4/src/ALU.v:12$13 ($sub).
  creating $alu model for $macc $flatten\alu_inst.$sub$/openlane/designs/project4/src/ALU.v:12$13.
  creating $alu model for $macc $flatten\alu_inst.$add$/openlane/designs/project4/src/ALU.v:11$12.
  creating $alu cell for $flatten\alu_inst.$add$/openlane/designs/project4/src/ALU.v:11$12: $auto$alumacc.cc:485:replace_alu$45
  creating $alu cell for $flatten\alu_inst.$sub$/openlane/designs/project4/src/ALU.v:12$13: $auto$alumacc.cc:485:replace_alu$48
  created 2 $alu and 0 $macc cells.

34. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module TopModule that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\alu_inst.$shr$/openlane/designs/project4/src/ALU.v:14$15 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\alu_inst.$procmux$32_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu_inst.$shl$/openlane/designs/project4/src/ALU.v:13$14 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\alu_inst.$procmux$33_CMP.
    No candidates found.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

35.9. Finished OPT passes. (There is nothing left to do.)

36. Executing MEMORY pass.

36.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

36.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

36.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing TopModule.regfile_inst.RegisterFile write port 0.

36.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

36.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\regfile_inst.RegisterFile'[0] in module `\TopModule': merging output FF to cell.
    Write port 0: don't care on collision.
Checking read port `\regfile_inst.RegisterFile'[1] in module `\TopModule': merging output FF to cell.
    Write port 0: don't care on collision.

36.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 2 unused cells and 66 unused wires.
<suppressed ~3 debug messages>

36.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory TopModule.regfile_inst.RegisterFile by address:

36.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

36.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

36.10. Executing MEMORY_COLLECT pass (generating $mem cells).

37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~4 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 1 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

38.5. Finished fast OPT passes.

39. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \regfile_inst.RegisterFile in module \TopModule:
  created 32 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of TopModule.regfile_inst.RegisterFile: $\regfile_inst.RegisterFile$rdreg[0]
Extracted data FF from read port 1 of TopModule.regfile_inst.RegisterFile: $\regfile_inst.RegisterFile$rdreg[1]
  read interface: 2 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~14 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

40.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\alu_inst.$procmux$31 in front of them:
        $auto$alumacc.cc:485:replace_alu$48
        $auto$alumacc.cc:485:replace_alu$45

40.7. Executing OPT_DFF pass (perform DFF optimizations).

40.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 5 unused cells and 114 unused wires.
<suppressed ~6 debug messages>

40.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

40.10. Rerunning OPT passes. (Maybe there is more to do..)

40.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

40.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
    New ctrl vector for $pmux cell $flatten\alu_inst.$procmux$31: { $flatten\alu_inst.$procmux$33_CMP $flatten\alu_inst.$procmux$32_CMP }
  Optimizing cells in module \TopModule.
Performed a total of 1 changes.

40.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

40.14. Executing OPT_SHARE pass.

40.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\regfile_inst.RegisterFile[9]$139 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[9]).
Adding EN signal on $memory\regfile_inst.RegisterFile[8]$137 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[8]).
Adding EN signal on $memory\regfile_inst.RegisterFile[7]$135 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[7]).
Adding EN signal on $memory\regfile_inst.RegisterFile[6]$133 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[6]).
Adding EN signal on $memory\regfile_inst.RegisterFile[5]$131 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[5]).
Adding EN signal on $memory\regfile_inst.RegisterFile[4]$129 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[4]).
Adding EN signal on $memory\regfile_inst.RegisterFile[3]$127 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[3]).
Adding EN signal on $memory\regfile_inst.RegisterFile[31]$183 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[31]).
Adding EN signal on $memory\regfile_inst.RegisterFile[30]$181 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[30]).
Adding EN signal on $memory\regfile_inst.RegisterFile[2]$125 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[2]).
Adding EN signal on $memory\regfile_inst.RegisterFile[29]$179 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[29]).
Adding EN signal on $memory\regfile_inst.RegisterFile[28]$177 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[28]).
Adding EN signal on $memory\regfile_inst.RegisterFile[27]$175 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[27]).
Adding EN signal on $memory\regfile_inst.RegisterFile[26]$173 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[26]).
Adding EN signal on $memory\regfile_inst.RegisterFile[25]$171 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[25]).
Adding EN signal on $memory\regfile_inst.RegisterFile[24]$169 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[24]).
Adding EN signal on $memory\regfile_inst.RegisterFile[23]$167 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[23]).
Adding EN signal on $memory\regfile_inst.RegisterFile[22]$165 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[22]).
Adding EN signal on $memory\regfile_inst.RegisterFile[21]$163 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[21]).
Adding EN signal on $memory\regfile_inst.RegisterFile[20]$161 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[20]).
Adding EN signal on $memory\regfile_inst.RegisterFile[1]$123 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[1]).
Adding EN signal on $memory\regfile_inst.RegisterFile[19]$159 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[19]).
Adding EN signal on $memory\regfile_inst.RegisterFile[18]$157 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[18]).
Adding EN signal on $memory\regfile_inst.RegisterFile[17]$155 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[17]).
Adding EN signal on $memory\regfile_inst.RegisterFile[16]$153 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[16]).
Adding EN signal on $memory\regfile_inst.RegisterFile[15]$151 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[15]).
Adding EN signal on $memory\regfile_inst.RegisterFile[14]$149 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[14]).
Adding EN signal on $memory\regfile_inst.RegisterFile[13]$147 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[13]).
Adding EN signal on $memory\regfile_inst.RegisterFile[12]$145 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[12]).
Adding EN signal on $memory\regfile_inst.RegisterFile[11]$143 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[11]).
Adding EN signal on $memory\regfile_inst.RegisterFile[10]$141 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[10]).
Adding EN signal on $memory\regfile_inst.RegisterFile[0]$121 ($dff) from module TopModule (D = \WD3, Q = \regfile_inst.RegisterFile[0]).

40.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

40.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

40.18. Rerunning OPT passes. (Maybe there is more to do..)

40.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

40.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

40.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

40.22. Executing OPT_SHARE pass.

40.23. Executing OPT_DFF pass (perform DFF optimizations).

40.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

40.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

40.26. Finished OPT passes. (There is nothing left to do.)

41. Executing TECHMAP pass (map to technology primitives).

41.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

41.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1668 debug messages>

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~258 debug messages>

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~180 debug messages>
Removed a total of 60 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 21 unused cells and 286 unused wires.
<suppressed ~22 debug messages>

42.5. Finished fast OPT passes.

43. Executing ABC pass (technology mapping using ABC).

43.1. Extracting gate netlist of module `\TopModule' to `<abc-temp-dir>/input.blif'..
Extracted 3045 gates and 4152 wires to a netlist network with 1106 inputs and 128 outputs.

43.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

43.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               NOR cells:       36
ABC RESULTS:               XOR cells:       87
ABC RESULTS:               MUX cells:     2305
ABC RESULTS:               NOT cells:       68
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              NAND cells:       16
ABC RESULTS:                OR cells:      321
ABC RESULTS:            ANDNOT cells:      172
ABC RESULTS:        internal signals:     2918
ABC RESULTS:           input signals:     1106
ABC RESULTS:          output signals:      128
Removing temp directory.

44. Executing OPT pass (performing simple optimizations).

44.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~1089 debug messages>

44.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

44.3. Executing OPT_DFF pass (perform DFF optimizations).

44.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 9 unused cells and 1512 unused wires.
<suppressed ~10 debug messages>

44.5. Finished fast OPT passes.

45. Executing HIERARCHY pass (managing design hierarchy).

45.1. Analyzing design hierarchy..
Top module:  \TopModule

45.2. Analyzing design hierarchy..
Top module:  \TopModule
Removed 0 unused modules.

46. Printing statistics.

=== TopModule ===

   Number of wires:               2982
   Number of wire bits:           4465
   Number of public wires:          57
   Number of public wire bits:    1447
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4138
     $_ANDNOT_                     172
     $_AND_                          2
     $_DFFE_PN_                     64
     $_DFFE_PP_                   1024
     $_DFF_P_                       32
     $_MUX_                       2305
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87

47. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Found and reported 0 problems.

48. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project4/runs/RUN_2025.05.31_14.40.26/tmp/synthesis/post_techmap.dot'.
Dumping module TopModule to page 1.

49. Executing SHARE pass (SAT-based resource sharing).

50. Executing OPT pass (performing simple optimizations).

50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

50.6. Executing OPT_DFF pass (perform DFF optimizations).

50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

50.9. Finished OPT passes. (There is nothing left to do.)

51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 13 unused wires.
<suppressed ~13 debug messages>

52. Printing statistics.

=== TopModule ===

   Number of wires:               2969
   Number of wire bits:           4253
   Number of public wires:          44
   Number of public wire bits:    1235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4138
     $_ANDNOT_                     172
     $_AND_                          2
     $_DFFE_PN_                     64
     $_DFFE_PP_                   1024
     $_DFF_P_                       32
     $_MUX_                       2305
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87

mapping tbuf

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing TECHMAP pass (map to technology primitives).

55.1. Executing Verilog-2005 frontend: /openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

55.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

56. Executing SIMPLEMAP pass (map simple cells to gate primitives).

57. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

57.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\TopModule':
  mapped 1120 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

58. Printing statistics.

=== TopModule ===

   Number of wires:               4057
   Number of wire bits:           5341
   Number of public wires:          44
   Number of public wire bits:    1235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5226
     $_ANDNOT_                     172
     $_AND_                          2
     $_MUX_                       3393
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87
     sky130_fd_sc_hd__dfxtp_2     1120

[INFO]: USING STRATEGY AREA 0

59. Executing ABC pass (technology mapping using ABC).

59.1. Extracting gate netlist of module `\TopModule' to `/tmp/yosys-abc-4c41sP/input.blif'..
Extracted 4106 gates and 5308 wires to a netlist network with 1202 inputs and 1120 outputs.

59.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-4c41sP/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-4c41sP/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-4c41sP/input.blif 
ABC: + read_lib -w /openlane/designs/project4/runs/RUN_2025.05.31_14.40.26/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/project4/runs/RUN_2025.05.31_14.40.26/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/project4/runs/RUN_2025.05.31_14.40.26/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/project4/runs/RUN_2025.05.31_14.40.26/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (5152.54 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   5099 ( 31.2 %)   Cap = 11.2 ff ( 10.8 %)   Area =    45717.60 ( 62.7 %)   Delay =  5261.61 ps  (  0.5 %)               
ABC: Path  0 --    1045 : 0    4 pi                        A =   0.00  Df =  47.1  -26.4 ps  S =  71.0 ps  Cin =  0.0 ff  Cout =  14.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2340 : 4    4 sky130_fd_sc_hd__or4_2    A =   8.76  Df = 721.0 -515.6 ps  S = 132.0 ps  Cin =  1.5 ff  Cout =  11.5 ff  Cmax = 310.4 ff  G =  718  
ABC: Path  2 --    2750 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =1372.1 -959.1 ps  S =  94.4 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  140  
ABC: Path  3 --    2751 : 1    8 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1558.6 -908.4 ps  S = 280.9 ps  Cin =  2.1 ff  Cout =  23.4 ff  Cmax = 130.0 ff  G = 1042  
ABC: Path  4 --    2804 : 5    1 sky130_fd_sc_hd__o41a_2   A =  12.51  Df =1974.0 -875.4 ps  S =  79.3 ps  Cin =  2.4 ff  Cout =   8.5 ff  Cmax = 305.8 ff  G =  346  
ABC: Path  5 --    2805 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =2129.8 -880.5 ps  S = 130.2 ps  Cin =  8.6 ff  Cout =   6.3 ff  Cmax = 130.0 ff  G =   68  
ABC: Path  6 --    2807 : 2    1 sky130_fd_sc_hd__and2_2   A =   7.51  Df =2307.5 -912.5 ps  S =  32.6 ps  Cin =  1.5 ff  Cout =   1.5 ff  Cmax = 303.0 ff  G =   96  
ABC: Path  7 --    2808 : 2    4 sky130_fd_sc_hd__or2_2    A =   6.26  Df =2624.9 -146.9 ps  S = 102.1 ps  Cin =  1.5 ff  Cout =  17.7 ff  Cmax = 299.4 ff  G = 1167  
ABC: Path  8 --    2833 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df =3278.2 -652.5 ps  S = 124.6 ps  Cin =  1.5 ff  Cout =   9.3 ff  Cmax = 310.4 ff  G =  588  
ABC: Path  9 --    2898 : 2    1 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =3394.0 -732.3 ps  S =  56.8 ps  Cin =  4.4 ff  Cout =   1.8 ff  Cmax = 141.9 ff  G =   39  
ABC: Path 10 --    2899 : 4    3 sky130_fd_sc_hd__o2bb2a_2 A =  11.26  Df =3617.1 -708.9 ps  S =  72.2 ps  Cin =  1.8 ff  Cout =   9.5 ff  Cmax = 294.8 ff  G =  522  
ABC: Path 11 --    2966 : 5    1 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =4025.5 -871.6 ps  S =  58.8 ps  Cin =  2.4 ff  Cout =   2.4 ff  Cmax = 324.1 ff  G =   96  
ABC: Path 12 --    2969 : 4    4 sky130_fd_sc_hd__o211a_2  A =  10.01  Df =4183.7 -827.6 ps  S =  92.1 ps  Cin =  2.4 ff  Cout =  12.2 ff  Cmax = 268.3 ff  G =  487  
ABC: Path 13 --    3000 : 5    2 sky130_fd_sc_hd__o311a_2  A =  11.26  Df =4596.1-1019.6 ps  S =  90.5 ps  Cin =  2.4 ff  Cout =  13.2 ff  Cmax = 293.9 ff  G =  539  
ABC: Path 14 --    3008 : 3    1 sky130_fd_sc_hd__o21ai_2  A =   8.76  Df =4756.9-1109.0 ps  S = 148.8 ps  Cin =  4.5 ff  Cout =   9.0 ff  Cmax = 139.2 ff  G =  190  
ABC: Path 15 --    3012 : 2    1 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =4930.4-1130.2 ps  S = 122.6 ps  Cin =  8.5 ff  Cout =   4.7 ff  Cmax = 121.8 ff  G =   52  
ABC: Path 16 --    3018 : 3    1 sky130_fd_sc_hd__o21ai_2  A =   8.76  Df =5261.6-1310.6 ps  S = 399.0 ps  Cin =  4.5 ff  Cout =  33.4 ff  Cmax = 139.2 ff  G =  735  
ABC: Start-point = pi1044 (\inputB [9]).  End-point = po31 ($flatten\alu_inst.$procmux$31.Y [31]).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1202/ 1120  lat =    0  nd =  5099  edge =  13229  area =45712.46  delay =17.00  lev = 17
ABC: + write_blif /tmp/yosys-abc-4c41sP/output.blif 

59.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       42
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      139
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       58
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      301
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:      264
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:      258
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:      269
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      201
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       55
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       90
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       82
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1453
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1573
ABC RESULTS:        internal signals:     2986
ABC RESULTS:           input signals:     1202
ABC RESULTS:          output signals:     1120
Removing temp directory.

60. Executing SETUNDEF pass (replace undef values with defined constants).

61. Executing HILOMAP pass (mapping to constant drivers).

62. Executing SPLITNETS pass (splitting up multi-bit signals).

63. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 5308 unused wires.
<suppressed ~1 debug messages>

64. Executing INSBUF pass (insert buffer cells for connected wires).

65. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Found and reported 0 problems.

66. Printing statistics.

=== TopModule ===

   Number of wires:               6135
   Number of wire bits:           6334
   Number of public wires:        1036
   Number of public wire bits:    1235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6219
     sky130_fd_sc_hd__a2111o_2       1
     sky130_fd_sc_hd__a211o_2       58
     sky130_fd_sc_hd__a21bo_2      258
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2       139
     sky130_fd_sc_hd__a21oi_2      201
     sky130_fd_sc_hd__a221o_2        6
     sky130_fd_sc_hd__a22o_2        55
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         4
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2        15
     sky130_fd_sc_hd__and2b_2      264
     sky130_fd_sc_hd__and3_2         6
     sky130_fd_sc_hd__and3b_2        6
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1       1573
     sky130_fd_sc_hd__dfxtp_2     1120
     sky130_fd_sc_hd__inv_2         19
     sky130_fd_sc_hd__mux2_2      1453
     sky130_fd_sc_hd__mux4_2       301
     sky130_fd_sc_hd__nand2_2       82
     sky130_fd_sc_hd__nand2b_2       3
     sky130_fd_sc_hd__nand3_2        3
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        90
     sky130_fd_sc_hd__nor2b_2        4
     sky130_fd_sc_hd__nor3_2         3
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__o211a_2       10
     sky130_fd_sc_hd__o211ai_2       3
     sky130_fd_sc_hd__o21a_2        29
     sky130_fd_sc_hd__o21ai_2       26
     sky130_fd_sc_hd__o21ba_2        5
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o221a_2      269
     sky130_fd_sc_hd__o22a_2        16
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       6
     sky130_fd_sc_hd__o311a_2        4
     sky130_fd_sc_hd__o31a_2        15
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__o32a_2        10
     sky130_fd_sc_hd__o41a_2         6
     sky130_fd_sc_hd__or2_2         42
     sky130_fd_sc_hd__or2b_2         6
     sky130_fd_sc_hd__or3_2         15
     sky130_fd_sc_hd__or3b_2         5
     sky130_fd_sc_hd__or4_2         11
     sky130_fd_sc_hd__xnor2_2       43
     sky130_fd_sc_hd__xor2_2        20

   Chip area for module '\TopModule': 69540.444800

67. Executing Verilog backend.
Dumping module `\TopModule'.

68. Executing JSON backend.

End of script. Logfile hash: 989b101ec4, CPU: user 1.49s system 0.07s, MEM: 48.75 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 80% 2x abc (5 sec), 3% 25x opt_expr (0 sec), ...
